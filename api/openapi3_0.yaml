openapi: 3.0.0
info:
  title: Pandemos
  description: >-
    API for visualization of Infection Models
  version: "1"
security:
  - bearerAuth: []
servers:
  - url: 'https://api.example.com/api/v0'
  - url: 'http://localhost:8000/'
paths:
###############################################################################
  /scenarios:
##############
    get: ######################################################################
      description: List all available scenarios.
      tags:
        - Simulations
      operationId: listScenarios
      responses:
        '200':
          description: List of scenario IDs
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdList'
    post: #####################################################################
      description: Create a new scenario to be simulated.
      tags:
        - Simulations
      operationId: createSimulations # TODO: createScenario
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewScenario'
      responses:
        '201':
          description: Created new Scenario
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ID'
###############################################################################
  /scenarios/{scenario_id}:
############################
    get: ######################################################################
      description: Get information about the specified scenario.
      tags:
        - Simulations
      operationId: getScenario
      parameters:
        - in: path
          name: scenario_id
          required: True
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Returned scenario
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Scenario'
    delete: ###################################################################
      description: Delete the Scenario and its data
      tags:
        - Simulations
      operationId: deleteScenario
      parameters:
        - in: path
          name: scenario_id
          required: True
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Deleted scenario
    put: ######################################################################
      description: Supply simulation data for a scenario.
      tags:
        - Simulations
      operationId: triggerSimulationRun # importScenarioData
      parameters:
          - in: path
            name: scenario_id
            required: True
            schema:
              type: string
              format: uuid
      requestBody: 
        content: 
          application/zip:
            schema: 
              type: string
              format: binary
      responses:
        '201':
          description: Added data to scenario
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ID'
###############################################################################
#  /scenarios/{scenario_id}/simulations/{runid}:
#    get:
#      tags:
#        - Simulations
#      operationId: getSimulationRunStatus
#      parameters:
#        - in: path
#          name: scenario_id
#          required: True
#          schema:
#            type: string
#            format: uuid
#        - in: path
#          name: runid
#          required: True
#          schema:
#            type: string
#            format: uuid
#          
#      responses:
#        '200':
#          description: return the simulation run status
#          content:
#            application/json:
#              schema:
#                $ref: '#/components/schemas/SimulationRunStatus'
#    delete:
#      tags:
#        - Simulations
#      operationId: deleteSimulationRun
#      parameters:
#        - in: path
#          name: scenario_id
#          required: True
#          schema:
#            type: string
#            format: uuid
#        - in: path
#          name: runid
#          required: True
#          schema:
#            type: string
#            format: uuid
#      description: deletes the run
#      responses:
#        '202':
#          description: run deleted
###############################################################################
  /scenarios/{scenario_id}/infectiondata:
##########################################
    get: ######################################################################
      tags:
        - Simulations
      operationId: getInfectionData
      parameters:
        - in: path
          name: scenario_id
          required: True
          schema: 
            type: string
            format: uuid
        - in: query
          required: false
          name: nodes
          description: Comma separated list of NodeIds or NUTS
          explode: false
          schema:
            type: array
            items:
              type: string
        - in: query
          required: false
          name: startDate
          description: Start date of requested data
          schema:
            type: string
            format: date
            example: '2024-01-01'
        - in: query
          required: false
          name: endDate
          description: End date of requested data
          schema:
            type: string
            format: date
            example: '2024-01-01'
        - in: query
          required: false
          name: compartments
          description: Comma separated list of Compartment IDs
          explode: false
          schema:
            type: array
            items:
              type: string
              format: uuid
        - in: query
          required: false
          name: aggregations
          description: Object with named (key) lists of compartment tags (value, AND connected)
          style: deepObject
          explode: true
          schema: 
            type: object
            properties:
              items:
                type: array
                items:
                  type: string
            example: {
              aggregation1: [Inf, V2],
            }
        - in: query
          required: false
          name: groups
          description: List of groups requesting data for
          explode: false
          schema:
            type: array
            items: 
              type: string
              format: uuid
        - in: query
          required: false
          name: percentiles
          description: Requested percentiles of the data
          explode: false
          schema:
            type: array
            items:
              type: number
              example: 50
      responses:
        '200':
          description: Return data matching filters. Unnecessary fields are omitted.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Infectiondata'
###############################################################################
  # /scenarios/{scenario_id}/migrations:
  #   get:
  #     tags: 
  #       - Simulations
  #     operationId: listNodeMigrations
  #     parameters: 
  #       - in: path
  #         name: scenario_id
  #         required: True
  #         schema: 
  #           type: string
  #           format: uuid
  #       - in: path
  #         name: runid
  #         required: True
  #         schema: 
  #           type: string
  #           format: uuid
  #       - in: query
  #         required: false
  #         name: startDate
  #         schema:
  #           type: string
  #       - in: query
  #         required: false
  #         name: endDate
  #         schema:
  #           type: string
  #       - in: query
  #         required: false
  #         name: compartments
  #         description: Compartment Aggregation
  #         schema:
  #           type: string
  #       - in: query
  #         required: false
  #         name: aggregation_flag
  #         schema: 
  #           type: boolean
  #       - in: query
  #         required: false
  #         name: groups
  #         schema:
  #           type: array
  #           items: 
  #             type: string
  #       - in: query
  #         required: true
  #         name: startNode
  #         schema: 
  #           type: string
  #       - in: query
  #         required: true
  #         name: endNode
  #         schema: 
  #           type: array
  #           items: 
  #             type: string
  #     responses:
  #       '200':
  #         description: return 
  #         content: 
  #           application/json:
  #             schema: 
  #               $ref: '#/components/schemas/NodeMigrations'
                
  # /scenarios/{scenario_id}/simulations/{runid}/topMigrations:
  #   get:
  #     tags: 
  #       - Simulations
  #     operationId: getTopMigrations
  #     parameters: 
  #       - in: path
  #         name: scenario_id
  #         required: True
  #         schema: 
  #           type: string
  #           format: uuid
  #       - in: path
  #         name: runid
  #         required: True
  #         schema: 
  #           type: string
  #           format: uuid
  #       - in: query
  #         required: false
  #         name: date
  #         schema:
  #           type: string
  #       - in: query
  #         required: false
  #         name: compartments
  #         description: Compartment Aggregation
  #         schema:
  #           type: string
  #       - in: query
  #         required: false
  #         name: aggregation_flag
  #         schema: 
  #           type: boolean
  #       - in: query
  #         required: false
  #         name: groups
  #         schema:
  #           type: array
  #           items: 
  #             type: string
  #       - in: query
  #         required: true
  #         name: node
  #         schema: 
  #           type: string
  #       - in: query
  #         required: false
  #         name: count
  #         schema:
  #           type: number
  #           format: integer
  #       - in: query
  #         required: false
  #         name: sort
  #         schema: 
  #           type: string
  #     responses:
  #       '200':
  #         description: return 
  #         content: 
  #           application/json:
  #             schema: 
  #               $ref: '#/components/schemas/IdList'
        
  # /scenarios/{scenario_id}/simulations/{runid}/gridcells:
  #   get:
  #     tags:
  #       - Simulations
  #     operationId: listGridcells
  #     parameters:
  #       - in: path
  #         name: scenario_id
  #         required: True
  #         schema: 
  #           type: string
  #           format: uuid
  #       - in: path
  #         name: runid
  #         required: True
  #         schema: 
  #           type: string
  #           format: uuid
  #     responses:
  #       '200':
  #         description: return the account
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/IdList'
  # /scenarios/{scenario_id}/simulations/{runid}/movements:
  #   get:
  #     tags:
  #       - Simulations
  #     operationId: listMovments
  #     parameters:
  #       - in: path
  #         name: scenario_id
  #         required: True
  #         schema: 
  #           type: string
  #           format: uuid
  #       - in: path
  #         name: runid
  #         required: True
  #         schema: 
  #           type: string
  #           format: uuid
  #     responses:
  #       '200':
  #         description: return the account
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/IdList'

  /interventions:
    get:
      tags:
        - Interventions
      operationId: listInterventions
      responses:
        '200':
          description: return the list of available interventions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdList'
    post:
      tags:
        - Interventions
      operationId: createIntervention
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewInterventionModel'
      responses:
        '201':
          description: Intervention created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ID'


  /interventions/{intervention_id}:
    get:
      tags:
        - Interventions
      operationId: getIntervention
      parameters:
        - in: path
          name: intervention_id
          required: True
          schema:
            format: uuid
            type: string
      responses:
        '200':
          description: return the Node
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InterventionModel'
    delete:
      tags:
        - Interventions
      operationId: deleteIntervention
      parameters:
        - in: path
          name: intervention_id
          required: True
          schema:
            format: uuid
            type: string
      description: deletes the Intervention if it is not referenced in any list
      responses:
        '202':
          description: Node deleted
  /models:
    get:
      tags:
        - Models
      operationId: listModels
      responses:
        '200':
          description: return the list of Models
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdList'
    post:
      tags:
        - Models
      operationId: createModel
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewModel'
      responses:
        '200':
          description: create a new Model
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ID'

  /models/{model_id}:
    get:
      tags:
        - Models
      operationId: getModel
      parameters:
        - in: path
          name: model_id
          required: True
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: return the list of Models
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Model'
    delete:
      tags:
        - Models
      operationId: deleteModel
      parameters:
        - in: path
          name: model_id
          required: True
          schema:
            type: string
            format: uuid
      description: deletes the model if it is not referenced in any scenario
      responses:
        '202':
          description: Model deleted

  /nodes:
    get:
      tags:
        - Nodes
      operationId: listNodes
      responses:
        '200':
          description: return the account
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdList'
    post:
      tags:
        - Nodes
      operationId: createNode
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewNode'
      responses:
        '201':
          description: node created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ID'


  /nodes/{node_id}:
    get:
      tags:
        - Nodes
      operationId: getNode
      parameters:
        - in: path
          name: node_id
          required: True
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: return the Node
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Node'
    delete:
      tags:
        - Nodes
      operationId: deleteNode
      parameters:
        - in: path
          name: node_id
          required: True
          schema:
            type: string
            format: uuid
      description: deletes the node if it is not referenced in any list
      responses:
        '202':
          description: Node deleted
  /nodelists:
    get:
      tags:
        - Nodes
      operationId: getNodeLists
      responses:
        '200':
          description: return all defined nodelists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdList'
    post:
      tags:
        - Nodes
      operationId: createNodeList
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewNodeList'
      responses:
        '201':
          description: node list created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ID'
  /nodelists/{node_id}:
    get:
      tags:
        - Nodes
      operationId: getNodeList
      parameters:
        - in: path
          name: node_id
          required: True
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: return the Node
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeList'
    delete:
      tags:
        - Nodes
      operationId: deleteNodeList
      parameters:
        - in: path
          name: node_id
          required: True
          schema:
            type: string
            format: uuid
      description: deletes the node list
      responses:
        '202':
          description: NodeList deleted
  
  /movements:
    get:
      tags:
        - Movements
      operationId: listMovements
      responses:
        '200':
          description: return the account
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdList'
                
  
  /groups:
    get:
      tags:
        - Groups
      operationId: listGroups
      responses:
        '200':
          description: return the list of existing groups
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdList'
    post:
      tags:
        - Groups
      operationId: createGroup
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewGroup'
      responses:
        '201':
          description: node created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ID'


  /groups/{group_id}:
    get:
      tags:
        - Groups
      operationId: getGroup
      parameters:
        - in: path
          name: group_id
          required: True
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: return the Group
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
    delete:
      tags:
        - Groups
      operationId: deleteGroup
      parameters:
        - in: path
          name: group_id
          required: True
          schema:
            type: string
            format: uuid
      description: deletes the Group if it is not referenced in any list
      responses:
        '202':
          description: Group deleted

  /aggregations:
    get:
      tags:
        - Aggregations
      operationId: listAggregations
      responses:
        '200':
          description: return the list of existing aggregations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdList'
    post:
      tags:
        - Aggregations
      operationId: createAggregations
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewAggregation'
      responses:
        '201':
          description: aggregation created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ID'


  /aggregations/{aggregations_id}:
    get:
      tags:
        - Aggregations
      operationId: getAggregations
      parameters:
        - in: path
          name: aggregations_id
          required: True
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: return the Group
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Aggregation'
    delete:
      tags:
        - Aggregations
      operationId: deleteAggregation
      parameters:
        - in: path
          name: aggregations_id
          required: True
          schema:
            type: string
            format: uuid
      description: deletes the Group if it is not referenced in any list
      responses:
        '202':
          description: Group deleted

  /parameterdefinitions:
    get:
      tags:
        - ParameterDefinitions
      operationId: listParameterDefinitions
      responses:
        '200':
          description: return the list of existing Parameter Definitions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdList'
    post:
      tags:
        - ParameterDefinitions
      operationId: createParameterDefinition
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewParameterDefinition'
      responses:
        '201':
          description: node created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ID'


  /parameterdefinitions/{parameter_id}:
    get:
      tags:
        - ParameterDefinitions
      operationId: getParameterDefinition
      parameters:
        - in: path
          name: parameter_id
          required: True
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: return the Group
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParameterDefinition'
    delete:
      tags:
        - ParameterDefinitions
      operationId: deleteParameterDefinition
      parameters:
        - in: path
          name: parameter_id
          required: True
          schema:
            type: string
            format: uuid
      description: deletes the Group if it is not referenced in any list
      responses:
        '202':
          description: Group deleted

components:
  securitySchemes:
    bearerAuth: # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:

    ID:
      type: object
      required:
        - id
      properties:
        id:
          type: string
          format: uuid

    IdList:
      type: array
      items:
        type: string
        format: uuid

    Named:
      type: object
      properties:
        name:
          type: string
          description: Display Name of the object
        description:
          type: string
          description: (Tooltip) Description of the object

    Tagged:
      type: object
      properties:
        tags:
          type: array
          description: Tags attached to this object
          items:
            type: string
            description: String-tags used in search and filter operations

    NewScenario:
      allOf:
        - $ref: '#/components/schemas/Named'
        - type: object
          properties:
            modelId:
              type: string
              format: uuid
              description: UUID of the model this scenario belongs to
            modelParameters:
              type: array
              description: List of (available) model parameters (UUIDs & values)
              items: 
                 $ref: '#/components/schemas/ParameterValue'
            nodeListId:
              type: string
              format: uuid
              description: UUID of the node list (districts etc.) of this scenario
            linkedInterventions:
              type: array
              description: List of interventions (UUIDs) used in this scenario
              items:
                 $ref: '#/components/schemas/ID'

    Scenario:
      allOf:
        - $ref: '#/components/schemas/ID'
        - $ref: '#/components/schemas/NewScenario'
        - type: object
          properties:
            dateSubmitted:
              type: string
              format: date
            dateSimulated:
              type: string
              format: date
        

    NewGroup:
      allOf:
        - $ref: '#/components/schemas/Named'
        - type: object
          properties:
            category:
              type: string
              description: Category this group belongs to. Groups with the same category are grouped together e.g. in filter UIs

    Group:
      allOf:
        - $ref: '#/components/schemas/ID'
        - $ref: '#/components/schemas/NewGroup'
    
    NewAggregation:
      allOf:
        - $ref: '#/components/schemas/CompartmentAggregation'
        
    Aggregation: 
      allOf: 
        - $ref: '#/components/schemas/ID'
        - $ref: '#/components/schemas/NewAggregation'
        
    NewParameterDefinition:
      allOf:
        - $ref: '#/components/schemas/Named'

    ParameterDefinition:
      allOf:
        - $ref: '#/components/schemas/ID'
        - $ref: '#/components/schemas/NewParameterDefinition'
          
    ParameterValueRange:
      type: object
      properties:
        groupId:
          type: string
          format: uuid
          description: UUID of the group this value set is for
        valueMin:
          type: number
          description: Floor of the parameter value (inclusive)
          example: 0
        valueMax:
          type: number
          description: Ceiling of the parameter value (inclusive)
          example: 1

    ParameterValue:
      type: object
      required:
        - parameterId
      properties:
        parameterId:
          type: string
          format: uuid
          description: UUID of the parameter (key)
        values:
          type: array
          description: List of values for each group (values)
          items:
             $ref: '#/components/schemas/ParameterValueRange'


    NewModel:
      allOf:
        - $ref: '#/components/schemas/Named'
        - type: object
          required:
            - groups
            - parameterDefinitions
            - compartments
          properties:
            aggregations:
              type: array
              items:
                type: string
                format: uuid
            compartments:
              type: array
              items:
                 $ref: '#/components/schemas/Compartment'
            groups:
              type: array
              items:
                type: string
                format: uuid
            parameterDefinitions:
              type: array
              items:
                type: string
                format: uuid
    Model:
      allOf:
        - $ref: '#/components/schemas/ID'
        - $ref: '#/components/schemas/NewModel'

    NewNode:
      type: object
      required:
        - nuts
        - name
      properties:
        nuts:
          type: string
          description: NUTS identifier of the node (district)
          example: '07131'
        name:
          type: string
          description: Display name of the node (district)
          example: Ahrweiler (LK)

    Node:
      allOf:
        - $ref: '#/components/schemas/ID'
        - $ref: '#/components/schemas/NewNode'

    NewNodeList:
      allOf:
        - $ref: '#/components/schemas/Named'
        - type: object
          properties:
            nodeIds:
              type: array
              items:
                type: string
                format: uuid

    NewInterventionModel:
      allOf:
        - $ref: '#/components/schemas/Named'
        - $ref: '#/components/schemas/Tagged'

    InterventionModel:
      allOf:
        - $ref: '#/components/schemas/ID'
        - $ref: '#/components/schemas/NewInterventionModel'

    NewInterventionImplementation:
      type: object
      properties:
        interventionId:
          type: string
          format: uuid
          
  
    Compartment:
      allOf:
        - $ref: '#/components/schemas/Named'
        - type: object
          properties:
            tags:
              type: array
              items:
                type: string

    CompartmentAggregation:
      allOf:
        - $ref: '#/components/schemas/Named'
        - type: object
          properties:
            tags:
              type: array
              items:
                type: string
                
    NodeMigrations: 
      type: array 
      items: 
        type: object
        properties: 
          timestamp: 
            type: string
            format: date
          node:
            type: string
          incoming: 
            type: number
            format: integer
          outgoing: 
            type: number
            format: integer
        
    Infectiondata: 
      type: object 
      properties: 
        timestamp: 
          type: string
          format: date
        node: 
          type: string
          format: uuid
        group:
          type: string
          format: uuid
        compartmentOrAggregation:
          type: string
        percentiles: 
          type: object
          items:
            type: number
            format: integer
      example:
        timestamp: '2024-01-01'
        node: '3fa85f64-5717-4562-b3fc-2c963f66afa6'
        group: '3fa85f64-5717-4562-b3fc-2c963f66afa6'
        compartmentOrAggregation: 'Compartment/Aggregation Name'
        percentiles:
          25: 0
          50: 0
          75: 0

    NodeList:
      allOf:
        - $ref: '#/components/schemas/NewNodeList'
        - $ref: '#/components/schemas/ID'

    Movement:
      type: object

    Restriction:
      allOf:
        - $ref: '#/components/schemas/Named'